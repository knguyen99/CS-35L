Khoi Nguyen

Exercise 1.1:

	 2) C-s H T M L M-b
	 3) C-s s c a v e n g e r M-b
	 4) C-s s e l f - r e f e r e n t i a l M-b M-b
	 5) C-s a r r o w M-b
	 6) C-e
	 7) C-a
	 8) Yes, using C-s to search for words and M-b to move back from words to move to the beginning of the word instead of arrows
	 9) I did not use arrow keys.
	 10) C-x C-c 

Exercise 1.2:

	 2) M-g 1 8 C-k
	 3) C-s D E C-a C-k
	 4) C-s w i k i p C-s M-h Backspace
	 5) C-s < ! C-b C-b M-z > C-s < ! C-n M-h C-p Backspace C-s < ! C-a C-k

Exercise 1.3:

	 2) C-s A s M-f M-f Backspace 4 2 C-s A s M-f M-f Backspace 42
	 3) M-< C-s U T C-b M-z 8 S - A S C I I
	 4) C-M-s [ ^ [ : a s c i i : ] ] M-h Backspace
	 5) M-< C-s < / o C-n Enter
	 
Exercise 1.4
	 
	 1) c a t SP e x e r 2 . h t m l SP e x e r 2 . d i f f SP > e x e r 4 . h t m l
	 3) M-> C-r C-SP C-e M-w C-r < / h t m C-n C-y
	 4) M-> C-r O C-p C-a C-f C-SP C-n C-n C-n C-e M-w C-r s h o u l d C-n C-y
	    M-> C-r ! C-r C-r C-b C-SP M-e C-b C-b C-b C-b C-b M-w C-r s h o u C-r M-f M-f M-f C-f C-y
	    M-> C-r Y M-h M-w C-r S u b C-r C-p C-y C-p C-f Backspace C-p C-p C-p C-f Backspace
	    M-> C-r D C-a C-f C-SP C-e M-w C-r L e a C-r C-n C-y
	    M-> C-r p a C-p C-a C-f C-SP C-n C-e M-w C-r s c a C-r C-r C-n C-y
	 5) C-s 2 0 1 8 - C-a C-SP M-> Backspace
	 6) C-x u
	 7) C-r C-p C-a Enter < ! - - M-% - - > Enter Enter y y y y y y M-> - - >
	 8) M-< M-% < o l > Enter < o L > Enter y y y y y y y
	   7 instances

Exercise 1.5
	 
	 1) M-x make-directory Enter j u n k Enter
	 2) M-x c d Enter j u n k Enter C-x C-f h e l l o . c Enter (paste text) C-x C-s
	 3) M-x c o m p i l e Enter DOWN g c c SP - o SP h e l l o SP h e l l o . c Enter
	 4) M-x c o m p i l e Enter DOWN . / h e l l o Enter Enter C-x C-w h e l l o - o u t Enter
	 5)C-SP M-> M-w C-x C-f k e y 1 . t x t Enter M-> C-y
-*- mode: compilation; default-directory: "~/junk/" -*-
Compilation started at Sat Oct  6 19:43:37

./hello
#include <stdio.h>
int
main (void)
{
  char n = '\n', b = '\\', q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn', b = '%c%c', q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);
  return 0;
}

Compilation finished at Sat Oct  6 19:43:37

Exercise 1.6

	 1) C-x b Enter
	 2) ( r a n d o m SP " 8 0 4 - 9 9 3 - 0 7 3 " ) C-j
	 2126194397744423449
	 3) ( s e t q SP x  SP ( r a n d o m ) ) C-j ( s e t q SP y SP ( r a n d o m ) ) C-j
	 4) ( * SP x  SP y ) C-j 
	    The answer is -394802132385366844. This is incorrect because it cannot be negative.
	 5) M-: ( * SP x  SP y ) Enter
	    This returns -394802132385366844 (#o352053030654646476304, #x3a85618d669a7cc4), different from above because of the octo format of the number.

	 6) Random gives psuedo-random numbers generated in a deterministic fashion, as stated by the manual.Pseudo-random numbers are generated from a seed value. Starting from any given seed, the random function always generates the same sequence of numbers.

	 7) In order for the number to be mathematically incorrect, x * y must cause overflow. Becuase they are random ints, the possibility of numbers for x is [-2^n, (2^n)-a] where n is the number of bits in bit representation of the number. To cause overflow, x * y > 2^n-1 or x*y < -2^n. Emacs uses 62 bit integers, making the max int 2305843009213693951 and the min int -2305843009213693952. Because these numbers are so large the probability that the multiplication will over flow is extremely high. For example, if x is 2305843009213693951, the only three values that would not overflow are 1,0, and -1, thus the probability that it won't overflow is 3 / (2305843009213693951+2305843009213693952).    
	    
