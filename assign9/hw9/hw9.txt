Khoi Nguyen
804993073
hw9.txt

1) Create the hw9.txt using command:
nano hw9.txt

I furthermore cloned a new diffutils to start fresh using commands:
git clone https://git.savannah.gnu.org/git/diffutils.git

2) To checkout version 3.0 of Diffutils into a new branch named "quote", I
ran the commands:
cd diffutils
git checkout v3.0 -b quote 

3) To install my change into the new branch, I ran the command:
patch -p1 < ../quote-3.0-patch.txt

The patch has been applied to the 6 files, I know this because the output is:
patching file src/cmp.c
patching file src/diff.c
patching file src/diff3.c
patching file src/dir.c
patching file src/sdiff.c
patching file src/util.c

4) Learned how to use emacs function add-change-log-entry-other-window(C-x 4 a)
by clicking on the link on the assignment page.

5) To compose an appropriate ChangeLog entry for the patch, I used the commands:
emacs ChangeLog
C-x 4 a

Entered this in the change log:
2018-12-07  Khoi Vu Nguyen  <nguyenk@lnxsrv09.seas.ucla.edu>

	* src/cmp.c: Changed ` to 'in character	string constants.
        * src/diff.c: Changed ` to 'in character string constants.
	* src/diff3.c: Changed ` to 'in character string constants.
        * src/dir.c: Changed ` to 'in character string constants.
        * src/sdiff.c: Changed ` to 'in character string constants.
        * src/util.c: Changed ` to 'in character string constants.

C-x C-c
y

6) To commit the changes to the branch, using the ChangeLog entry is the commit message,
I used the commands:
git add .
git commit -F Changelog

The output was:
 Committer: Khoi Vu Nguyen <nguyenk@lnxsrv09.seas.ucla.edu>
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly:

    git config --global user.name "Your Name"
    git config --global user.email you@example.com

After doing this, you may fix the identity used for this commit with:

    git commit --amend --reset-author

 6 files changed, 43 insertions(+), 43 deletions(-)

7) To generate the file formatted-patch.txt, I used the command:
git format-patch -1 --stdout > formatted-patch.txt

8) Now we test with a partner. Me and my partner Elwyn emailed each other our 
formatted-patch.txt and put it into a new file called partner-patch.txt through
copy and paste.

My partners name: Elwyn Cruz
ID: 104977892

Commands:
cd ..
nano partner-patch.txt
(copy and paste)
cd diffutils
git checkout v3.0 -b partner

Applying partner's patch:
git am < ../partner-patch.txt

Following README-hacking:
./bootstrap

Since I was on lnxsrv09, I had to apply the patch again
curl http://web.cs.ucla.edu/classes/winter18/cs35L/assign/diffutils-gets.diff > ../diffutils-gets.diff
patch -p0 < ../diffutils-gets.diff

./configure
make
make check

Testing to make sure the patch was applied correctly:
./src/diff . -

Output:
./src/diff: cannot compare '-' to a directory

./src//diff --help

Output:
Usage: ./src/diff [OPTION]... FILES
Compare files line by line.

  -i  --ignore-case  Ignore case differences in file contents.
  --ignore-file-name-case  Ignore case when comparing file names.
  --no-ignore-file-name-case  Consider case when comparing file names.
  -E  --ignore-tab-expansion  Ignore changes due to tab expansion.
  -b  --ignore-space-change  Ignore changes in the amount of white space.
  -w  --ignore-all-space  Ignore all white space.
  -B  --ignore-blank-lines  Ignore changes whose lines are all blank.
  -I RE  --ignore-matching-lines=RE  Ignore changes whose lines all match RE.
  --strip-trailing-cr  Strip trailing carriage return on input.
  -a  --text  Treat all files as text.

  -c  -C NUM  --context[=NUM]  Output NUM (default 3) lines of copied context.
  -u  -U NUM  --unified[=NUM]  Output NUM (default 3) lines of unified context.
    --label LABEL  Use LABEL instead of file name.
    -p  --show-c-function  Show which C function each change is in.
    -F RE  --show-function-line=RE  Show the most recent line matching RE.
  -q  --brief  Output only whether files differ.
  -e  --ed  Output an ed script.
  --normal  Output a normal diff.
  -n  --rcs  Output an RCS format diff.
  -y  --side-by-side  Output in two columns.
    -W NUM  --width=NUM  Output at most NUM (default 130) print columns.
    --left-column  Output only the left column of common lines.
    --suppress-common-lines  Do not output common lines.
  -D NAME  --ifdef=NAME  Output merged file to show '#ifdef NAME' diffs.
  --GTYPE-group-format=GFMT  Similar, but format GTYPE input groups with GFMT.
  --line-format=LFMT  Similar, but format all input lines with LFMT.
  --LTYPE-line-format=LFMT  Similar, but format LTYPE input lines with LFMT.
    LTYPE is 'old', 'new', or 'unchanged'.  GTYPE is LTYPE or 'changed'.
    GFMT may contain:
      %<  lines from FILE1
      %>  lines from FILE2
      %=  lines common to FILE1 and FILE2
      %[-][WIDTH][.[PREC]]{doxX}LETTER  printf-style spec for LETTER
        LETTERs are as follows for new group, lower case for old group:
          F  first line number
          L  last line number
          N  number of lines = L-F+1
          E  F-1
          M  L+1
    LFMT may contain:
      %L  contents of line
      %l  contents of line, excluding any trailing newline
      %[-][WIDTH][.[PREC]]{doxX}n  printf-style spec for input line number
    Either GFMT or LFMT may contain:
      %%  %
      %c'C'  the single character C
      %c'\OOO'  the character with octal code OOO

  -l  --paginate  Pass the output through 'pr' to paginate it.
  -t  --expand-tabs  Expand tabs to spaces in output.
  -T  --initial-tab  Make tabs line up by prepending a tab.
  --tabsize=NUM  Tab stops are every NUM (default 8) print columns.
  --suppress-blank-empty  Suppress space or tab before empty output lines.

  -r  --recursive  Recursively compare any subdirectories found.
  -N  --new-file  Treat absent files as empty.
  --unidirectional-new-file  Treat absent first files as empty.
  -s  --report-identical-files  Report when two files are the same.
  -x PAT  --exclude=PAT  Exclude files that match PAT.
  -X FILE  --exclude-from=FILE  Exclude files that match any pattern in FILE.
  -S FILE  --starting-file=FILE  Start with FILE when comparing directories.
  --from-file=FILE1  Compare FILE1 to all operands.  FILE1 can be a directory.
  --to-file=FILE2  Compare all operands to FILE2.  FILE2 can be a directory.

  --horizon-lines=NUM  Keep NUM lines of the common prefix and suffix.
  -d  --minimal  Try hard to find a smaller set of changes.
  --speed-large-files  Assume large files and many scattered small changes.

  -v  --version  Output version info.
  --help  Output this help.

FILES are 'FILE1 FILE2' or 'DIR1 DIR2' or 'DIR FILE...' or 'FILE... DIR'.
If --from-file or --to-file is given, there are no restrictions on FILES.
If a FILE is '-', read standard input.
Exit status is 0 if inputs are the same, 1 if different, 2 if trouble.

Report bugs to: bug-diffutils@gnu.org
GNU diffutils home page: <http://www.gnu.org/software/diffutils/>
General help using GNU software: <http://www.gnu.org/gethelp/>

Since all the grave marks changed to single quotes, the patch worked.

9) Next we verify that my ChangeLog entry works by running:
make distdir 
cd diffutils-3.0.1-0a08
ls
emacs ChangeLog

From this we see that Elwyn Cruz was the last edit on the ChangeLog, thus the 
patch was applied correctly.

10) For the last portion, since I have a Mac, I downloaded XQuartz. I then opened XQuartz.
I had to login again using ssh -X nguyenk@lnxsrv09.seas.ucla.edu
Commands to run gitk on the GNU emacs repository in the specified directory:
export PATH=/usr/local/cs/bin:$PATH
cd ~eggert/src/gnu/emacs
gitk --until=2015-01-25

Now I will look for the newest commit not newer that 01-25-2015, then create a description
of the subwindows in a file named gitk-description.txt.
